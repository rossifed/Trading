using Quantaventis.Trading.Modules.Execution.Infrastructure.Dao;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Quantaventis.Trading.Modules.Execution.Domain.Model;
using Quantaventis.Trading.Modules.Execution.Domain.Repositories;
using Entities = Quantaventis.Trading.Modules.Execution.Infrastructure.Dao;
namespace Quantaventis.Trading.Modules.Execution.Infrastructure.Mappers
{
    internal static class Extensions
    {
        internal static IEnumerable<Entities.EmsxOrder> Map(this IEnumerable<EmsxOrder> objs)
        {
            return objs.Select(x => x.Map());
        }
        internal static Entities.EmsxOrder Map(this EmsxOrder domain)
        {
            return new Entities.EmsxOrder()
            {
                EmsxSequence = domain.EmsxOrderId,
                Amount = domain.Amount,
                Broker = domain.Broker,
                HandInstruction = domain.HandInstruction,
                OrderType = domain.OrderType,
                Ticker = domain.Ticker,
                TimeInForce = domain.TimeInForce,
                OrderOrigin = domain.OrderOrigin,
                ApiSeqNum = domain.ApiSeqNum,
                OrderNumber = domain.OrderNumber,
                Side = domain.Side,
                Account = domain.Account,
                BasketName = domain.BasketName,
                Strategy = domain.Strategy,
                ClearingAccount = domain.ClearingAccount,
                ClearingFirm = domain.ClearingFirm,
                CustomNote1 = domain.CustomNote1,
                CustomNote2 = domain.CustomNote2,
                CustomNote3 = domain.CustomNote3,
                CustomNote4 = domain.CustomNote4,
                CustomNote5 = domain.CustomNote5,
                ExchangeDestination = domain.ExchangeDestination,
                ExecInstruction = domain.ExecInstruction,
                Warnings = domain.Warnings,
                GtdDate = domain.GtdDate,
                InvestorId = domain.InvestorId,
                LimitPrice = domain.LimitPrice,
                LocateBroker = domain.LocateBroker,
                LocateId = domain.LocateId,
                LocateRequest = domain.LocateRequest,
                Notes = domain.Notes,
                OddLot = domain.OddLot,
                OrderRefId = domain.OrderRefId,
                ReleaseTime = domain.ReleaseTime,
                RequestSequence = domain.RequestSequence,
                SettlementCurrency = domain.SettlementCurrency,
                SettlementDate = domain.SettlementDate,
                SettlementType = domain.SettlementType,
                SettlementPrice = domain.SettlementPrice,
                StopPrice = domain.StopPrice,
                TraderUuid = domain.TraderUuid,
                ArrivalPrice = domain.ArrivalPrice,
                AssetClass = domain.AssetClass,
                AssignedTrader = domain.AssignedTrader,
                AvgPrice = domain.AvgPrice,
                BasketNum = domain.BasketNum,
                BrokerComm = domain.BrokerComm,
                BseAvgPrice = domain.BseAvgPrice,
                BseFilled = domain.BseFilled,
                CfdFlag = domain.CfdFlag,
                CommDiffFlag = domain.CommDiffFlag,
                CommRate = domain.CommRate,
                CurrencyPair = domain.CurrencyPair,
                Date = domain.Date,
                DayAvgPrice = domain.DayAvgPrice,
                DayFill = domain.DayFill,
                DirBrokerFlag = domain.DirBrokerFlag,
                Exchange = domain.Exchange,
                FillId = domain.FillId,
                Filled = domain.Filled,
                IdleAmount = domain.IdleAmount,
                Isin = domain.Isin,
                NseAvgPrice = domain.NseAvgPrice,
                NseFilled = domain.NseFilled,
                OriginateTrader = domain.OriginateTrader,
                OriginateTraderFirm = domain.OriginateTraderFirm,
                //  PercentRemain = Convert.To(domain.PercentRemain),
                PmUuid = domain.PmUuid,
                PortMgr = domain.PortMgr,
                PortName = domain.PortName,
                PortNum = domain.PortNum,
                Position = domain.Position,
                Principal = domain.Principal,
                Product = domain.Product,
                QueuedDate = domain.QueuedDate,
                QueuedTime = domain.QueuedTime,
                ReasonCode = domain.ReasonCode,
                ReasonDescription = domain.ReasonDescription,
                RemainBalance = domain.RemainBalance,
                RouteId = domain.RouteId,
                RoutePrice = domain.RoutePrice,
                SecName = domain.SecName,
                Sedol = domain.Sedol,
                SettleAmount = domain.SettleAmount,
                SettleDate = domain.SettleDate,
                StartAmount = domain.StartAmount,
                Status = domain.Status,
                StepOutBrooker = domain.StepOutBrooker,
                StrategyEndTime = domain.StrategyEndTime,
                StrategyPartRate1 = domain.StrategyPartRate1,
                StrategyPartRate2 = domain.StrategyPartRate2,
                StrategyStartTime = domain.StrategyStartTime,
                StrategyStyle = domain.StrategyStyle,
                StrategyType = domain.StrategyType,
                TimeStamp = domain.TimeStamp,
                TradeDesk = domain.TradeDesk,
                Trader = domain.Trader,
                TraderNotes = domain.TraderNotes,
                TsOrdNum = domain.TsOrdNum,
                Type = domain.Type,
                UnderlyingTicker = domain.UnderlyingTicker,
                UserCommAmount = domain.UserCommAmount,
                UserCommRate = domain.UserCommRate,
                UserFees = domain.UserFees,
                UserNetMoney = domain.UserNetMoney,
                UserWorkPrice = domain.UserWorkPrice,
                Working = domain.Working,
                YellowKey = domain.YellowKey,
                BookName = domain.BookName,
                LocateReq = domain.LocateReq,
                Pa = domain.Pa,
                RouteRefId = domain.RouteRefId
            };
        }

        internal static EmsxOrder Map(this Entities.EmsxOrder entity)
        {
            return new EmsxOrder()
            {
                EmsxOrderId = entity.EmsxSequence,
                Amount = entity.Amount.Value,
                Broker = entity.Broker,
                HandInstruction = entity.HandInstruction,
                OrderType = entity.OrderType,
                Ticker = entity.Ticker,
                TimeInForce = entity.TimeInForce,
                OrderOrigin = entity.OrderOrigin,
                ApiSeqNum = entity.ApiSeqNum,
                OrderNumber = entity.OrderNumber,
                Side = entity.Side,
                Account = entity.Account,
                BasketName = entity.BasketName,
                Strategy = entity.Strategy,
                ClearingAccount = entity.ClearingAccount,
                ClearingFirm = entity.ClearingFirm,
                CustomNote1 = entity.CustomNote1,
                CustomNote2 = entity.CustomNote2,
                CustomNote3 = entity.CustomNote3,
                CustomNote4 = entity.CustomNote4,
                CustomNote5 = entity.CustomNote5,
                ExchangeDestination = entity.ExchangeDestination,
                ExecInstruction = entity.ExecInstruction,
                Warnings = entity.Warnings,
                GtdDate = entity.GtdDate,
                InvestorId = entity.InvestorId,
                LimitPrice = entity.LimitPrice,
                LocateBroker = entity.LocateBroker,
                LocateId = entity.LocateId,
                LocateRequest = entity.LocateRequest,
                Notes = entity.Notes,
                OddLot = entity.OddLot,
                OrderRefId = entity.OrderRefId,
                ReleaseTime = entity.ReleaseTime,
                RequestSequence = entity.RequestSequence,
                SettlementCurrency = entity.SettlementCurrency,
                SettlementDate = entity.SettlementDate,
                SettlementType = entity.SettlementType,
                SettlementPrice = entity.SettlementPrice,
                StopPrice = entity.StopPrice,
                TraderUuid = entity.TraderUuid,
                ArrivalPrice = entity.ArrivalPrice,
                AssetClass = entity.AssetClass,
                AssignedTrader = entity.AssignedTrader,
                AvgPrice = entity.AvgPrice,
                BasketNum = entity.BasketNum,
                BrokerComm = entity.BrokerComm,
                BseAvgPrice = entity.BseAvgPrice,
                BseFilled = entity.BseFilled,
                CfdFlag = entity.CfdFlag,
                CommDiffFlag = entity.CommDiffFlag,
                CommRate = entity.CommRate,
                CurrencyPair = entity.CurrencyPair,
                Date = entity.Date,
                DayAvgPrice = entity.DayAvgPrice,
                DayFill = entity.DayFill,
                DirBrokerFlag = entity.DirBrokerFlag,
                Exchange = entity.Exchange,
                FillId = entity.FillId,
                Filled = entity.Filled,
                IdleAmount = entity.IdleAmount,
                Isin = entity.Isin,
                NseAvgPrice = entity.NseAvgPrice,
                NseFilled = entity.NseFilled,
                OriginateTrader = entity.OriginateTrader,
                OriginateTraderFirm = entity.OriginateTraderFirm,
                //  PercentRemain = Convert.To(entity.PercentRemain),
                PmUuid = entity.PmUuid,
                PortMgr = entity.PortMgr,
                PortName = entity.PortName,
                PortNum = entity.PortNum,
                Position = entity.Position,
                Principal = entity.Principal,
                Product = entity.Product,
                QueuedDate = entity.QueuedDate,
                QueuedTime = entity.QueuedTime,
                ReasonCode = entity.ReasonCode,
                ReasonDescription = entity.ReasonDescription,
                RemainBalance = entity.RemainBalance,
                RouteId = entity.RouteId,
                RoutePrice = entity.RoutePrice,
                SecName = entity.SecName,
                Sedol = entity.Sedol,
                SettleAmount = entity.SettleAmount,
                SettleDate = entity.SettleDate,
                StartAmount = entity.StartAmount,
                Status = entity.Status,
                StepOutBrooker = entity.StepOutBrooker,
                StrategyEndTime = entity.StrategyEndTime,
                StrategyPartRate1 = entity.StrategyPartRate1,
                StrategyPartRate2 = entity.StrategyPartRate2,
                StrategyStartTime = entity.StrategyStartTime,
                StrategyStyle = entity.StrategyStyle,
                StrategyType = entity.StrategyType,
                TimeStamp = entity.TimeStamp,
                TradeDesk = entity.TradeDesk,
                Trader = entity.Trader,
                TraderNotes = entity.TraderNotes,
                TsOrdNum = entity.TsOrdNum,
                Type = entity.Type,
                UnderlyingTicker = entity.UnderlyingTicker,
                UserCommAmount = entity.UserCommAmount,
                UserCommRate = entity.UserCommRate,
                UserFees = entity.UserFees,
                UserNetMoney = entity.UserNetMoney,
                UserWorkPrice = entity.UserWorkPrice,
                Working = entity.Working,
                YellowKey = entity.YellowKey,
                BookName = entity.BookName,
                LocateReq = entity.LocateReq,
                Pa = entity.Pa,
                RouteRefId = entity.RouteRefId
            };
        }
        internal static IEnumerable<EmsxFill> Map(this IEnumerable<Entities.EmsxFill> entities)
        {
            return entities.Select(x => x.Map());
        }
        internal static EmsxFill Map(this Entities.EmsxFill entity)
        {


            return new EmsxFill(
                entity.OrderId,
                entity.FillId,
                entity.Side,
                entity.Amount,
                entity.FillShares,
                entity.FillPrice,
                entity.Currency,
                entity.Exchange,
                entity.Ticker,
                entity.YellowKey,
                entity.IsCfd
                )
            {
                Account = entity.Account,
                AssetClass = entity.AssetClass,
                BasketId = entity.BasketId,
                BbgId = entity.Bbgid,
                BlockId = entity.BlockId,
                Broker = entity.Broker,
                ClearingAccount = entity.ClearingAccount,
                ClearingFirm = entity.ClearingFirm,
                ContractExpDate = entity.ContractExpDate != null ? DateOnly.FromDateTime(entity.ContractExpDate.Value) : null,
                CorrectedFillId = entity.CorrectedFillId,
                Cusip = entity.Cusip,
                DateTimeOfFillUtc = entity.DateTimeOfFill,
                ExecPrevSeqNo = entity.ExecPrevSeqNo,
                ExecType = entity.ExecType,
                ExecutingBroker = entity.ExecutingBroker,
                InvestorId = entity.InvestorId,
                Isin = entity.Isin,
                IsLeg = entity.IsLeg,
                LastCapacity = entity.LastCapacity,
                LastMarket = entity.LastMarket,
                LimitPrice = entity.LimitPrice,
                Liquidity = entity.Liquidity,
                LocalExchangeSymbol = entity.LocalExchangeSymbol,
                LocateBroker = entity.LocateBroker,
                LocateId = entity.LocateId,
                LocateRequired = entity.LocateRequired,
                MultiLegId = entity.MultiLegId,
                OccSymbol = entity.OccSymbol,
                OrderExecutionInstruction = entity.OrderExecutionInstruction,
                OrderHandlingInstruction = entity.OrderHandlingInstruction,
      
                OrderInstruction = entity.OrderInstruction,
                OrderOrigin = entity.OrderOrigin,
                OrderReferenceId = entity.OrderReferenceId,
                OriginatingTraderUUId = entity.OriginatingTraderUuid,
                ReroutedBroker = entity.ReroutedBroker,
                RouteCommissionAmount = entity.RouteCommissionAmount,
                RouteCommissionRate = entity.RouteCommissionRate,
                RouteExecutionInstruction = entity.RouteExecutionInstruction,
                RouteHandlingInstruction = entity.RouteHandlingInstruction,
                RouteId = entity.RouteId,
                RouteNetMoney = entity.RouteNetMoney,
                RouteNotes = entity.RouteNotes,
                RouteShares = entity.RouteShares,
                SecurityName = entity.SecurityName,
                Sedol = entity.Sedol,
                SettlementDate = entity.SettlementDate != null ? DateOnly.FromDateTime(entity.SettlementDate.Value) : null,
                StopPrice = entity.StopPrice,
                StrategyType = entity.StrategyType,
                Tif = entity.Tif,
                TraderName = entity.TraderName,
                TraderUUId = entity.TraderUuid,
                OrderType = entity.Type,
                UserCommissionAmount = entity.UserCommissionAmount,
                UserCommissionRate = entity.UserCommissionRate,
                UserFees = entity.UserFees,
                UserNetMoney = entity.UserNetMoney,
            };
        }
    }
}
