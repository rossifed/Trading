using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quantaventis.Trading.Modules.Execution.Api.Dto;
using Quantaventis.Trading.Modules.Execution.Domain.Model;
using Entities =Quantaventis.Trading.Modules.Execution.Infrastructure.Entities;

namespace Quantaventis.Trading.Modules.Execution.Api.Mappers
{
    internal static class Extensions
    {
        internal static IEnumerable<EmsxOrder> Map(this IEnumerable<EmsxOrderDto> dtos)
        => dtos.Select(x => x.Map()).ToList();

      
        internal static EmsxOrder Map(this EmsxOrderDto dto)
        {

            return new EmsxOrder()
            {
                EmsxOrderId = dto.Sequence,
                Amount = dto.Amount,
                Broker = dto.Broker.Trim(),
                HandInstruction = dto.HandInstruction,
                OrderType = dto.OrderType,
                Ticker = dto.Ticker,
                TimeInForce = dto.TimeInForce,
                OrderOrigin = dto.OrderOrigin,
                ApiSeqNum = dto.ApiSeqNum,
                OrderNumber = dto.OrderNumber,
                Side = dto.Side,
                Account = dto.Account,
                BasketName = dto.BasketName,
                Strategy = dto.Strategy,
                ClearingAccount = dto.ClearingAccount,
                ClearingFirm = dto.ClearingFirm,
                CustomNote1 = dto.CustomNote1?.Trim(),
                CustomNote2 = dto.CustomNote2?.Trim(),
                CustomNote3 = dto.CustomNote3?.Trim(),
                CustomNote4 = dto.CustomNote4?.Trim(),
                CustomNote5 = dto.CustomNote5?.Trim(),
                ExchangeDestination = dto.ExchangeDestination,
                ExecInstruction = dto.ExecInstruction,
                Warnings = dto.Warnings,
                GtdDate = dto.GtdDate,
                InvestorId = dto.InvestorId,
                LimitPrice = (decimal)dto.LimitPrice,
                LocateBroker = dto.LocateBroker,
                LocateId = dto.LocateId,
                LocateRequest = dto.LocateRequest,
                Notes = dto.Notes,
                OddLot = dto.OddLot,
                OrderRefId = dto.OrderRefId,
                ReleaseTime = dto.ReleaseTime,
                RequestSequence = dto.RequestSequence,
                SettlementCurrency = dto.SettlementCurrency,
                SettlementDate = dto.SettlementDate,
                SettlementType = dto.SettlementType,
                SettlementPrice = (decimal?)dto.SettlementPrice,
                StopPrice = (decimal?)dto.StopPrice,
                TraderUuid = dto.TraderUuid,
                ArrivalPrice = (decimal?)dto.ArrivalPrice,
                AssetClass = dto.AssetClass,
                AssignedTrader = dto.AssignedTrader,
                AvgPrice = (decimal?)dto.AvgPrice,
                BasketNum = dto.BasketNum,
                BrokerComm = (decimal?)dto.BrokerComm,
                BseAvgPrice = (decimal?)dto.BseAvgPrice,
                BseFilled = dto.BseFilled,
                CfdFlag = dto.CfdFlag,
                CommDiffFlag = dto.CommDiffFlag,
                CommRate = (decimal?)dto.CommRate,
                CurrencyPair = dto.CurrencyPair,
                Date = dto.Date,
                DayAvgPrice = (decimal?)dto.DayAvgPrice,
                DayFill = dto.DayFill,
                DirBrokerFlag = dto.DirBrokerFlag,
                Exchange = dto.Exchange,
                FillId = dto.FillId,
                Filled = dto.Filled,
                IdleAmount = dto.IdleAmount,
                Isin = dto.Isin,
                NseAvgPrice = (decimal?)dto.NseAvgPrice,
                NseFilled = dto.NseFilled,
                OriginateTrader = dto.OriginateTrader,
                OriginateTraderFirm = dto.OriginateTraderFirm,
              //  PercentRemain = Convert.ToDecimal(dto.PercentRemain),
                PmUuid = dto.PmUuid,
                PortMgr = dto.PortMgr,
                PortName = dto.PortName,
                PortNum = dto.PortNum,
                Position = dto.Position,
                Principal = (decimal?)dto.Principal,
                Product = dto.Product,
                QueuedDate = dto.QueuedDate,
                QueuedTime = dto.QueuedTime,
                ReasonCode = dto.ReasonCode,
                ReasonDescription = dto.ReasonDescription,
                RemainBalance = (decimal?)dto.RemainBalance,
                RouteId = dto.RouteId,
                RoutePrice = (decimal?)dto.RoutePrice,
                SecName = dto.SecName,
                Sedol = dto.Sedol,
                SettleAmount = (decimal?)dto.SettleAmount,
                SettleDate = dto.SettleDate,
                StartAmount = dto.StartAmount,
                Status = dto.Status,
                StepOutBrooker = dto.StepOutBrooker,
                StrategyEndTime = dto.StrategyEndTime,
                StrategyPartRate1 = (decimal?)dto.StrategyPartRate1,
                StrategyPartRate2 = (decimal?)dto.StrategyPartRate2,
                StrategyStartTime = dto.StrategyStartTime,
                StrategyStyle = dto.StrategyStyle,
                StrategyType = dto.StrategyType,
                TimeStamp = dto.TimeStamp,
                TradeDesk = dto.TradeDesk,
                Trader = dto.Trader,
                TraderNotes = dto.TraderNotes,
                TsOrdNum = dto.TsOrdNum,
                Type = dto.Type,
                UnderlyingTicker = dto.UnderlyingTicker,
                UserCommAmount = (decimal?)dto.UserCommAmount,
                UserCommRate = (decimal?)dto.UserCommRate,
                UserFees = (decimal?)dto.UserFees,
                UserNetMoney = (decimal?)dto.UserNetMoney,
                UserWorkPrice = (decimal?)dto.UserWorkPrice,
                Working = dto.Working,
                YellowKey = dto.YellowKey,
                BookName = dto.BookName,
                LocateReq = dto.LocateReq,
                Pa = dto.Pa,
                RouteRefId = dto.RouteRefId
            };
        }

      
        internal static IEnumerable<EmsxTradeDto> Map(this IEnumerable<Domain.Model.EmsxTrade> dtos)
       => dtos.Select(x => x.Map()).ToList();


        internal static EmsxTradeDto Map(this EmsxTrade domain)
        {
            return new EmsxTradeDto()
            {
                Symbol = domain.Symbol,
                EmsxOrderId = domain.EmsxOrderId,
                Account = domain.Account,
                OrderQuantity = domain.OrderQuantity,
                AssetClass = domain.AssetClass,
                BasketId = domain.BasketId,
                BbgId = domain.BbgId,
                BlockId = domain.BlockId,
                Broker = domain.Broker,
                ClearingAccount = domain.ClearingAccount,
                ClearingFirm = domain.ClearingFirm,
                ContractExpDate = domain.ContractExpDate,
                Currency = domain.Currency,
                Cusip = domain.Cusip,
         
                Exchange = domain.Exchange,
  
                FilledQuantity = domain.FilledQuantity,
                IsCFD = domain.IsCFD,
                Isin = domain.Isin,
               
                LocalExchangeSymbol = domain.LocalExchangeSymbol,
              
                OrderExecutionInstruction = domain.OrderExecutionInstruction,
                OrderHandlingInstruction = domain.OrderHandlingInstruction,
                OrderInstruction = domain.OrderInstruction,
                OrderOrigin = domain.OrderOrigin,
                OrderReferenceId = domain.OrderReferenceId,
                OriginatingTraderUUId = domain.OriginatingTraderUUId,
                SecurityName = domain.SecurityName,
                Sedol = domain.Sedol,
                SettlementDate = domain.SettlementDate,
                Side = domain.Side,
                StopPrice = domain.StopPrice,
                StrategyType = domain.StrategyType,
                Ticker = domain.Ticker,
                Tif = domain.Tif,
                TraderName = domain.TraderName,
                TraderUUId = domain.TraderUUId,
                OrderType = domain.OrderType,
                UserCommissionAmount = domain.UserCommissionAmount,
                UserCommissionRate = domain.UserCommissionRate,
                UserFees = domain.UserFees,
                UserNetMoney = domain.UserNetMoney,
                YellowKey = domain.YellowKey,
                FirstFillDateTimeUtc = domain.FirstFillDateTimeUtc,
                LastFillDateTimeUtc = domain.LastFillDateTimeUtc,
                NumberOfFills = domain.NumberOfFills,
                AvgPrice = domain.AvgPrice,
                MaxFillPrice = domain.MaxFillPrice,
                MinFillPrice = domain.MinFillPrice,
            };
        }


        private static string? NullIfEmpty(this string str) => string.IsNullOrEmpty(str.Trim())  ? null : str.Trim();

        internal static IEnumerable<Entities.EmsxFill> Map(this IEnumerable<EmsxFillDto> dtos)
         => dtos.Select(x => x.Map()).ToList();
        internal static Entities.EmsxFill Map(this EmsxFillDto dto)
        {

            return new Entities.EmsxFill()
            {
                Account = dto.Account?.NullIfEmpty(),
                Amount = (int)dto.Amount,
                AssetClass = dto.AssetClass?.NullIfEmpty(),
                BasketId = dto.BasketId,
                Bbgid = dto.Bbgid?.NullIfEmpty(),
                BlockId = dto.BlockId,
                Broker = dto.Broker?.NullIfEmpty(),
                ClearingAccount = dto.ClearingAccount?.NullIfEmpty(),
                ClearingFirm = dto.ClearingFirm?.NullIfEmpty(),
                ContractExpDate = dto.ContractExpDate,
                CorrectedFillId = dto.CorrectedFillId,
                Currency = dto.Currency?.NullIfEmpty(),
                Cusip = dto.Cusip?.NullIfEmpty(),
                DateTimeOfFill = dto.DateTimeOfFillUtc,
                Exchange = dto.Exchange?.NullIfEmpty(),
                ExecPrevSeqNo = dto.ExecPrevSeqNo,
                ExecType = dto.ExecType?.NullIfEmpty(),
                ExecutingBroker = dto.ExecutingBroker?.NullIfEmpty(),
                FillId = dto.FillId,
                FillPrice = (decimal)dto.FillPrice,
                FillShares = Convert.ToInt32(dto.FillShares),
                InvestorId = dto.InvestorId,
                IsCfd = dto.IsCFD,
                Isin = dto.Isin?.NullIfEmpty(),
                IsLeg = dto.IsLeg,
                LastCapacity = dto.LastCapacity,
                LastMarket = dto.LastMarket,
                LimitPrice = (decimal?)dto.LimitPrice,
                Liquidity = dto.Liquidity,
                LocalExchangeSymbol = dto.LocalExchangeSymbol?.NullIfEmpty(),
                LocateBroker = dto.LocateBroker?.NullIfEmpty(),
                LocateId = dto.LocateId,
                LocateRequired = dto.LocateRequired,
                MultiLegId = dto.MultiLegId,
                OccSymbol = dto.OccSymbol?.NullIfEmpty(),
                OrderExecutionInstruction = dto.OrderExecutionInstruction?.NullIfEmpty(),
                OrderHandlingInstruction = dto.OrderHandlingInstruction?.NullIfEmpty(),
                OrderId = dto.OrderId,
                OrderInstruction = dto.OrderInstruction?.NullIfEmpty(),
                OrderOrigin = dto.OrderOrigin?.NullIfEmpty(),
                OrderReferenceId = dto.OrderReferenceId?.NullIfEmpty(),
                OriginatingTraderUuid = dto.OriginatingTraderUUId,
                ReroutedBroker = dto.ReroutedBroker,
                RouteCommissionAmount = (decimal?)dto.RouteCommissionAmount,
                RouteCommissionRate = (decimal?)dto.RouteCommissionRate,
                RouteExecutionInstruction = dto.RouteExecutionInstruction,
                RouteHandlingInstruction = dto.RouteHandlingInstruction,
                RouteId = dto.RouteId,
                RouteNetMoney = (decimal?)dto.RouteNetMoney,
                RouteNotes = dto.RouteNotes?.NullIfEmpty(),
                RouteShares = Convert.ToInt32(dto.RouteShares),
                SecurityName = dto.SecurityName?.NullIfEmpty(),
                Sedol = dto.Sedol?.NullIfEmpty(),
                SettlementDate = dto.SettlementDate,
                Side = dto.Side,
                StopPrice = (decimal?)dto.StopPrice,
                StrategyType = dto.StrategyType?.NullIfEmpty(),
                Ticker = dto.Ticker?.NullIfEmpty(),
                Tif = dto.Tif?.NullIfEmpty(),
                TraderName = dto.TraderName?.NullIfEmpty(),
                TraderUuid = dto.TraderUUId,
                Type = dto.Type?.NullIfEmpty(),
                UserCommissionAmount = (decimal?)dto.UserCommissionAmount,
                UserCommissionRate = (decimal?)dto.UserCommissionRate,
                UserFees = (decimal?)dto.UserFees,
                UserNetMoney = (decimal?)dto.UserNetMoney,
                YellowKey = dto.YellowKey?.NullIfEmpty()
            };
        }
    }
}
